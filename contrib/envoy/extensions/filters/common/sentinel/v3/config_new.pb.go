// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: contrib/envoy/extensions/filters/common/sentinel/v3/config_new.proto

package sentinelv3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RateLimitStrategy_LimitMode int32

const (
	RateLimitStrategy_MODE_LOCAL           RateLimitStrategy_LimitMode = 0
	RateLimitStrategy_MODE_GLOBAL          RateLimitStrategy_LimitMode = 1
	RateLimitStrategy_MODE_GLOBAL_TO_LOCAL RateLimitStrategy_LimitMode = 2
)

// Enum value maps for RateLimitStrategy_LimitMode.
var (
	RateLimitStrategy_LimitMode_name = map[int32]string{
		0: "MODE_LOCAL",
		1: "MODE_GLOBAL",
		2: "MODE_GLOBAL_TO_LOCAL",
	}
	RateLimitStrategy_LimitMode_value = map[string]int32{
		"MODE_LOCAL":           0,
		"MODE_GLOBAL":          1,
		"MODE_GLOBAL_TO_LOCAL": 2,
	}
)

func (x RateLimitStrategy_LimitMode) Enum() *RateLimitStrategy_LimitMode {
	p := new(RateLimitStrategy_LimitMode)
	*p = x
	return p
}

func (x RateLimitStrategy_LimitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateLimitStrategy_LimitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[0].Descriptor()
}

func (RateLimitStrategy_LimitMode) Type() protoreflect.EnumType {
	return &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[0]
}

func (x RateLimitStrategy_LimitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateLimitStrategy_LimitMode.Descriptor instead.
func (RateLimitStrategy_LimitMode) EnumDescriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{1, 0}
}

type ConcurrencyLimitStrategy_LimitMode int32

const (
	ConcurrencyLimitStrategy_MODE_LOCAL           ConcurrencyLimitStrategy_LimitMode = 0
	ConcurrencyLimitStrategy_MODE_GLOBAL          ConcurrencyLimitStrategy_LimitMode = 1
	ConcurrencyLimitStrategy_MODE_GLOBAL_TO_LOCAL ConcurrencyLimitStrategy_LimitMode = 2
)

// Enum value maps for ConcurrencyLimitStrategy_LimitMode.
var (
	ConcurrencyLimitStrategy_LimitMode_name = map[int32]string{
		0: "MODE_LOCAL",
		1: "MODE_GLOBAL",
		2: "MODE_GLOBAL_TO_LOCAL",
	}
	ConcurrencyLimitStrategy_LimitMode_value = map[string]int32{
		"MODE_LOCAL":           0,
		"MODE_GLOBAL":          1,
		"MODE_GLOBAL_TO_LOCAL": 2,
	}
)

func (x ConcurrencyLimitStrategy_LimitMode) Enum() *ConcurrencyLimitStrategy_LimitMode {
	p := new(ConcurrencyLimitStrategy_LimitMode)
	*p = x
	return p
}

func (x ConcurrencyLimitStrategy_LimitMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConcurrencyLimitStrategy_LimitMode) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[1].Descriptor()
}

func (ConcurrencyLimitStrategy_LimitMode) Type() protoreflect.EnumType {
	return &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[1]
}

func (x ConcurrencyLimitStrategy_LimitMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConcurrencyLimitStrategy_LimitMode.Descriptor instead.
func (ConcurrencyLimitStrategy_LimitMode) EnumDescriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{2, 0}
}

type CircuitBreakerStrategy_Strategy int32

const (
	CircuitBreakerStrategy_STRATEGY_SLOW_REQUEST_RATIO  CircuitBreakerStrategy_Strategy = 0
	CircuitBreakerStrategy_STRATEGY_ERROR_REQUEST_RATIO CircuitBreakerStrategy_Strategy = 1
)

// Enum value maps for CircuitBreakerStrategy_Strategy.
var (
	CircuitBreakerStrategy_Strategy_name = map[int32]string{
		0: "STRATEGY_SLOW_REQUEST_RATIO",
		1: "STRATEGY_ERROR_REQUEST_RATIO",
	}
	CircuitBreakerStrategy_Strategy_value = map[string]int32{
		"STRATEGY_SLOW_REQUEST_RATIO":  0,
		"STRATEGY_ERROR_REQUEST_RATIO": 1,
	}
)

func (x CircuitBreakerStrategy_Strategy) Enum() *CircuitBreakerStrategy_Strategy {
	p := new(CircuitBreakerStrategy_Strategy)
	*p = x
	return p
}

func (x CircuitBreakerStrategy_Strategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CircuitBreakerStrategy_Strategy) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[2].Descriptor()
}

func (CircuitBreakerStrategy_Strategy) Type() protoreflect.EnumType {
	return &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[2]
}

func (x CircuitBreakerStrategy_Strategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CircuitBreakerStrategy_Strategy.Descriptor instead.
func (CircuitBreakerStrategy_Strategy) EnumDescriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{3, 0}
}

type FallbackAction_BehaviorType int32

const (
	FallbackAction_RETURN_PROVIDED_RESPONSE FallbackAction_BehaviorType = 0
	FallbackAction_REDIRECT                 FallbackAction_BehaviorType = 1
)

// Enum value maps for FallbackAction_BehaviorType.
var (
	FallbackAction_BehaviorType_name = map[int32]string{
		0: "RETURN_PROVIDED_RESPONSE",
		1: "REDIRECT",
	}
	FallbackAction_BehaviorType_value = map[string]int32{
		"RETURN_PROVIDED_RESPONSE": 0,
		"REDIRECT":                 1,
	}
)

func (x FallbackAction_BehaviorType) Enum() *FallbackAction_BehaviorType {
	p := new(FallbackAction_BehaviorType)
	*p = x
	return p
}

func (x FallbackAction_BehaviorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FallbackAction_BehaviorType) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[3].Descriptor()
}

func (FallbackAction_BehaviorType) Type() protoreflect.EnumType {
	return &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[3]
}

func (x FallbackAction_BehaviorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FallbackAction_BehaviorType.Descriptor instead.
func (FallbackAction_BehaviorType) EnumDescriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{4, 0}
}

type FallbackAction_BodyEncoding int32

const (
	FallbackAction_TEXT FallbackAction_BodyEncoding = 0
	FallbackAction_JSON FallbackAction_BodyEncoding = 1
)

// Enum value maps for FallbackAction_BodyEncoding.
var (
	FallbackAction_BodyEncoding_name = map[int32]string{
		0: "TEXT",
		1: "JSON",
	}
	FallbackAction_BodyEncoding_value = map[string]int32{
		"TEXT": 0,
		"JSON": 1,
	}
)

func (x FallbackAction_BodyEncoding) Enum() *FallbackAction_BodyEncoding {
	p := new(FallbackAction_BodyEncoding)
	*p = x
	return p
}

func (x FallbackAction_BodyEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FallbackAction_BodyEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[4].Descriptor()
}

func (FallbackAction_BodyEncoding) Type() protoreflect.EnumType {
	return &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes[4]
}

func (x FallbackAction_BodyEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FallbackAction_BodyEncoding.Descriptor instead.
func (FallbackAction_BodyEncoding) EnumDescriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{4, 1}
}

// [#protodoc-title: Sentinel]
// [#comment:next free field: 2]
// [#next-free-field: 9]
type CommonConfigNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppName                string                `protobuf:"bytes,1,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	SystemMetricIntervalMs uint32                `protobuf:"varint,2,opt,name=system_metric_interval_ms,json=systemMetricIntervalMs,proto3" json:"system_metric_interval_ms,omitempty"`
	LogDir                 string                `protobuf:"bytes,3,opt,name=log_dir,json=logDir,proto3" json:"log_dir,omitempty"`
	Rules                  []*FaultToleranceRule `protobuf:"bytes,4,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *CommonConfigNew) Reset() {
	*x = CommonConfigNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonConfigNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonConfigNew) ProtoMessage() {}

func (x *CommonConfigNew) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonConfigNew.ProtoReflect.Descriptor instead.
func (*CommonConfigNew) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{0}
}

func (x *CommonConfigNew) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *CommonConfigNew) GetSystemMetricIntervalMs() uint32 {
	if x != nil {
		return x.SystemMetricIntervalMs
	}
	return 0
}

func (x *CommonConfigNew) GetLogDir() string {
	if x != nil {
		return x.LogDir
	}
	return ""
}

func (x *CommonConfigNew) GetRules() []*FaultToleranceRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// RateLimitStrategy
type RateLimitStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitMode    RateLimitStrategy_LimitMode `protobuf:"varint,1,opt,name=limit_mode,json=limitMode,proto3,enum=envoy.extensions.filters.common.sentinel.v3.RateLimitStrategy_LimitMode" json:"limit_mode,omitempty"`
	Threshold    uint64                      `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Burst        uint64                      `protobuf:"varint,3,opt,name=burst,proto3" json:"burst,omitempty"`
	StatDuration *duration.Duration          `protobuf:"bytes,4,opt,name=stat_duration,json=statDuration,proto3" json:"stat_duration,omitempty"`
}

func (x *RateLimitStrategy) Reset() {
	*x = RateLimitStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitStrategy) ProtoMessage() {}

func (x *RateLimitStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitStrategy.ProtoReflect.Descriptor instead.
func (*RateLimitStrategy) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{1}
}

func (x *RateLimitStrategy) GetLimitMode() RateLimitStrategy_LimitMode {
	if x != nil {
		return x.LimitMode
	}
	return RateLimitStrategy_MODE_LOCAL
}

func (x *RateLimitStrategy) GetThreshold() uint64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *RateLimitStrategy) GetBurst() uint64 {
	if x != nil {
		return x.Burst
	}
	return 0
}

func (x *RateLimitStrategy) GetStatDuration() *duration.Duration {
	if x != nil {
		return x.StatDuration
	}
	return nil
}

// ConcurrencyLimitStrategy
type ConcurrencyLimitStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitMode      ConcurrencyLimitStrategy_LimitMode `protobuf:"varint,1,opt,name=limit_mode,json=limitMode,proto3,enum=envoy.extensions.filters.common.sentinel.v3.ConcurrencyLimitStrategy_LimitMode" json:"limit_mode,omitempty"`
	MaxConcurrency uint64                             `protobuf:"varint,2,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
}

func (x *ConcurrencyLimitStrategy) Reset() {
	*x = ConcurrencyLimitStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLimitStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimitStrategy) ProtoMessage() {}

func (x *ConcurrencyLimitStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimitStrategy.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimitStrategy) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{2}
}

func (x *ConcurrencyLimitStrategy) GetLimitMode() ConcurrencyLimitStrategy_LimitMode {
	if x != nil {
		return x.LimitMode
	}
	return ConcurrencyLimitStrategy_MODE_LOCAL
}

func (x *ConcurrencyLimitStrategy) GetMaxConcurrency() uint64 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

// CircuitBreakerStrategy
type CircuitBreakerStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy         CircuitBreakerStrategy_Strategy                      `protobuf:"varint,1,opt,name=strategy,proto3,enum=envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy_Strategy" json:"strategy,omitempty"`
	TriggerRatio     uint32                                               `protobuf:"varint,2,opt,name=trigger_ratio,json=triggerRatio,proto3" json:"trigger_ratio,omitempty"`
	StatDuration     *duration.Duration                                   `protobuf:"bytes,3,opt,name=stat_duration,json=statDuration,proto3" json:"stat_duration,omitempty"`
	RecoveryTimeout  *duration.Duration                                   `protobuf:"bytes,4,opt,name=recovery_timeout,json=recoveryTimeout,proto3" json:"recovery_timeout,omitempty"`
	MinRequestAmount uint32                                               `protobuf:"varint,5,opt,name=min_request_amount,json=minRequestAmount,proto3" json:"min_request_amount,omitempty"`
	SlowCondition    *CircuitBreakerStrategy_CircuitBreakerSlowCondition  `protobuf:"bytes,6,opt,name=slow_condition,json=slowCondition,proto3" json:"slow_condition,omitempty"`
	ErrorCondition   *CircuitBreakerStrategy_CircuitBreakerErrorCondition `protobuf:"bytes,7,opt,name=error_condition,json=errorCondition,proto3" json:"error_condition,omitempty"`
}

func (x *CircuitBreakerStrategy) Reset() {
	*x = CircuitBreakerStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerStrategy) ProtoMessage() {}

func (x *CircuitBreakerStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerStrategy.ProtoReflect.Descriptor instead.
func (*CircuitBreakerStrategy) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{3}
}

func (x *CircuitBreakerStrategy) GetStrategy() CircuitBreakerStrategy_Strategy {
	if x != nil {
		return x.Strategy
	}
	return CircuitBreakerStrategy_STRATEGY_SLOW_REQUEST_RATIO
}

func (x *CircuitBreakerStrategy) GetTriggerRatio() uint32 {
	if x != nil {
		return x.TriggerRatio
	}
	return 0
}

func (x *CircuitBreakerStrategy) GetStatDuration() *duration.Duration {
	if x != nil {
		return x.StatDuration
	}
	return nil
}

func (x *CircuitBreakerStrategy) GetRecoveryTimeout() *duration.Duration {
	if x != nil {
		return x.RecoveryTimeout
	}
	return nil
}

func (x *CircuitBreakerStrategy) GetMinRequestAmount() uint32 {
	if x != nil {
		return x.MinRequestAmount
	}
	return 0
}

func (x *CircuitBreakerStrategy) GetSlowCondition() *CircuitBreakerStrategy_CircuitBreakerSlowCondition {
	if x != nil {
		return x.SlowCondition
	}
	return nil
}

func (x *CircuitBreakerStrategy) GetErrorCondition() *CircuitBreakerStrategy_CircuitBreakerErrorCondition {
	if x != nil {
		return x.ErrorCondition
	}
	return nil
}

// Fallback
type FallbackAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                      FallbackAction_BehaviorType `protobuf:"varint,1,opt,name=type,proto3,enum=envoy.extensions.filters.common.sentinel.v3.FallbackAction_BehaviorType" json:"type,omitempty"`
	BodyEncoding              FallbackAction_BodyEncoding `protobuf:"varint,2,opt,name=body_encoding,json=bodyEncoding,proto3,enum=envoy.extensions.filters.common.sentinel.v3.FallbackAction_BodyEncoding" json:"body_encoding,omitempty"`
	ResponseStatuscode        uint32                      `protobuf:"varint,3,opt,name=response_statuscode,json=responseStatuscode,proto3" json:"response_statuscode,omitempty"`
	ResponseContentBody       string                      `protobuf:"bytes,4,opt,name=response_content_body,json=responseContentBody,proto3" json:"response_content_body,omitempty"`
	ResponseRedirectUrl       string                      `protobuf:"bytes,5,opt,name=response_redirect_url,json=responseRedirectUrl,proto3" json:"response_redirect_url,omitempty"`
	ResponseAdditionalHeaders map[string]string           `protobuf:"bytes,6,rep,name=response_additional_headers,json=responseAdditionalHeaders,proto3" json:"response_additional_headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FallbackAction) Reset() {
	*x = FallbackAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallbackAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallbackAction) ProtoMessage() {}

func (x *FallbackAction) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallbackAction.ProtoReflect.Descriptor instead.
func (*FallbackAction) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{4}
}

func (x *FallbackAction) GetType() FallbackAction_BehaviorType {
	if x != nil {
		return x.Type
	}
	return FallbackAction_RETURN_PROVIDED_RESPONSE
}

func (x *FallbackAction) GetBodyEncoding() FallbackAction_BodyEncoding {
	if x != nil {
		return x.BodyEncoding
	}
	return FallbackAction_TEXT
}

func (x *FallbackAction) GetResponseStatuscode() uint32 {
	if x != nil {
		return x.ResponseStatuscode
	}
	return 0
}

func (x *FallbackAction) GetResponseContentBody() string {
	if x != nil {
		return x.ResponseContentBody
	}
	return ""
}

func (x *FallbackAction) GetResponseRedirectUrl() string {
	if x != nil {
		return x.ResponseRedirectUrl
	}
	return ""
}

func (x *FallbackAction) GetResponseAdditionalHeaders() map[string]string {
	if x != nil {
		return x.ResponseAdditionalHeaders
	}
	return nil
}

type FaultToleranceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetResourceNames        []string                    `protobuf:"bytes,1,rep,name=target_resource_names,json=targetResourceNames,proto3" json:"target_resource_names,omitempty"`
	RateLimitStrategies        []*RateLimitStrategy        `protobuf:"bytes,2,rep,name=rate_limit_strategies,json=rateLimitStrategies,proto3" json:"rate_limit_strategies,omitempty"`
	ConcurrencyLimitStrategies []*ConcurrencyLimitStrategy `protobuf:"bytes,3,rep,name=concurrency_limit_strategies,json=concurrencyLimitStrategies,proto3" json:"concurrency_limit_strategies,omitempty"`
	CircuitBreakerStrategies   []*CircuitBreakerStrategy   `protobuf:"bytes,4,rep,name=circuit_breaker_strategies,json=circuitBreakerStrategies,proto3" json:"circuit_breaker_strategies,omitempty"`
	Action                     *FallbackAction             `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *FaultToleranceRule) Reset() {
	*x = FaultToleranceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FaultToleranceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FaultToleranceRule) ProtoMessage() {}

func (x *FaultToleranceRule) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FaultToleranceRule.ProtoReflect.Descriptor instead.
func (*FaultToleranceRule) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{5}
}

func (x *FaultToleranceRule) GetTargetResourceNames() []string {
	if x != nil {
		return x.TargetResourceNames
	}
	return nil
}

func (x *FaultToleranceRule) GetRateLimitStrategies() []*RateLimitStrategy {
	if x != nil {
		return x.RateLimitStrategies
	}
	return nil
}

func (x *FaultToleranceRule) GetConcurrencyLimitStrategies() []*ConcurrencyLimitStrategy {
	if x != nil {
		return x.ConcurrencyLimitStrategies
	}
	return nil
}

func (x *FaultToleranceRule) GetCircuitBreakerStrategies() []*CircuitBreakerStrategy {
	if x != nil {
		return x.CircuitBreakerStrategies
	}
	return nil
}

func (x *FaultToleranceRule) GetAction() *FallbackAction {
	if x != nil {
		return x.Action
	}
	return nil
}

type CircuitBreakerStrategy_CircuitBreakerSlowCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxAllowedRt *duration.Duration `protobuf:"bytes,1,opt,name=max_allowed_rt,json=maxAllowedRt,proto3" json:"max_allowed_rt,omitempty"`
}

func (x *CircuitBreakerStrategy_CircuitBreakerSlowCondition) Reset() {
	*x = CircuitBreakerStrategy_CircuitBreakerSlowCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerStrategy_CircuitBreakerSlowCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerStrategy_CircuitBreakerSlowCondition) ProtoMessage() {}

func (x *CircuitBreakerStrategy_CircuitBreakerSlowCondition) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerStrategy_CircuitBreakerSlowCondition.ProtoReflect.Descriptor instead.
func (*CircuitBreakerStrategy_CircuitBreakerSlowCondition) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{3, 0}
}

func (x *CircuitBreakerStrategy_CircuitBreakerSlowCondition) GetMaxAllowedRt() *duration.Duration {
	if x != nil {
		return x.MaxAllowedRt
	}
	return nil
}

type CircuitBreakerStrategy_CircuitBreakerErrorCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CircuitBreakerStrategy_CircuitBreakerErrorCondition) Reset() {
	*x = CircuitBreakerStrategy_CircuitBreakerErrorCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerStrategy_CircuitBreakerErrorCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerStrategy_CircuitBreakerErrorCondition) ProtoMessage() {}

func (x *CircuitBreakerStrategy_CircuitBreakerErrorCondition) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerStrategy_CircuitBreakerErrorCondition.ProtoReflect.Descriptor instead.
func (*CircuitBreakerStrategy_CircuitBreakerErrorCondition) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{3, 1}
}

type CircuitBreakerStrategy_RecoveryStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeCount uint32 `protobuf:"varint,1,opt,name=probe_count,json=probeCount,proto3" json:"probe_count,omitempty"`
}

func (x *CircuitBreakerStrategy_RecoveryStrategy) Reset() {
	*x = CircuitBreakerStrategy_RecoveryStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakerStrategy_RecoveryStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakerStrategy_RecoveryStrategy) ProtoMessage() {}

func (x *CircuitBreakerStrategy_RecoveryStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakerStrategy_RecoveryStrategy.ProtoReflect.Descriptor instead.
func (*CircuitBreakerStrategy_RecoveryStrategy) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP(), []int{3, 2}
}

func (x *CircuitBreakerStrategy_RecoveryStrategy) GetProbeCount() uint32 {
	if x != nil {
		return x.ProbeCount
	}
	return 0
}

var File_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto protoreflect.FileDescriptor

var file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDesc = []byte{
	0x0a, 0x44, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6c, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6e, 0x65, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x33, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x65, 0x77, 0x12,
	0x22, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x12, 0x55, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xc1,
	0x02, 0x0a, 0x11, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x67, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28, 0x00, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x09, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x10, 0x02, 0x22, 0x84, 0x02, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x6e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x28,
	0x00, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0x46, 0x0a, 0x09, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x5f, 0x54,
	0x4f, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xa6, 0x07, 0x0a, 0x16, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x68, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2e,
	0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x64, 0x28, 0x00,
	0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x48,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x28, 0x00, 0x52, 0x10, 0x6d,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x86, 0x01, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x60, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x33,
	0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x68, 0x0a, 0x1b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x5f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x74, 0x1a, 0x1e,
	0x0a, 0x1c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x33,
	0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x4d, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x53, 0x4c, 0x4f, 0x57,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x10, 0x01, 0x22, 0xd5, 0x05, 0x0a, 0x0e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x76,
	0x33, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x0d, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x08, 0x52, 0x13, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x3c, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x08, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x9a, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x33, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x4c, 0x0a, 0x1e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0c, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x22, 0x22, 0x0a, 0x0c, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x22, 0xd1, 0x04, 0x0a, 0x12, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x3c, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x64, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x7c, 0x0a, 0x15, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x0a, 0x52, 0x13, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x91, 0x01,
	0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x33, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x10, 0x0a, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65,
	0x73, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x92, 0x01, 0x02, 0x10, 0x0a, 0x52, 0x18, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x2e, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xb1,
	0x01, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0x0a, 0x39, 0x69, 0x6f, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x33, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x5d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6c, 0x2f, 0x76, 0x33, 0x3b, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c,
	0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescOnce sync.Once
	file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescData = file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDesc
)

func file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescGZIP() []byte {
	file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescOnce.Do(func() {
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescData = protoimpl.X.CompressGZIP(file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescData)
	})
	return file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDescData
}

var file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_goTypes = []interface{}{
	(RateLimitStrategy_LimitMode)(0),                            // 0: envoy.extensions.filters.common.sentinel.v3.RateLimitStrategy.LimitMode
	(ConcurrencyLimitStrategy_LimitMode)(0),                     // 1: envoy.extensions.filters.common.sentinel.v3.ConcurrencyLimitStrategy.LimitMode
	(CircuitBreakerStrategy_Strategy)(0),                        // 2: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.Strategy
	(FallbackAction_BehaviorType)(0),                            // 3: envoy.extensions.filters.common.sentinel.v3.FallbackAction.BehaviorType
	(FallbackAction_BodyEncoding)(0),                            // 4: envoy.extensions.filters.common.sentinel.v3.FallbackAction.BodyEncoding
	(*CommonConfigNew)(nil),                                     // 5: envoy.extensions.filters.common.sentinel.v3.CommonConfigNew
	(*RateLimitStrategy)(nil),                                   // 6: envoy.extensions.filters.common.sentinel.v3.RateLimitStrategy
	(*ConcurrencyLimitStrategy)(nil),                            // 7: envoy.extensions.filters.common.sentinel.v3.ConcurrencyLimitStrategy
	(*CircuitBreakerStrategy)(nil),                              // 8: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy
	(*FallbackAction)(nil),                                      // 9: envoy.extensions.filters.common.sentinel.v3.FallbackAction
	(*FaultToleranceRule)(nil),                                  // 10: envoy.extensions.filters.common.sentinel.v3.FaultToleranceRule
	(*CircuitBreakerStrategy_CircuitBreakerSlowCondition)(nil),  // 11: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.CircuitBreakerSlowCondition
	(*CircuitBreakerStrategy_CircuitBreakerErrorCondition)(nil), // 12: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.CircuitBreakerErrorCondition
	(*CircuitBreakerStrategy_RecoveryStrategy)(nil),             // 13: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.RecoveryStrategy
	nil,                       // 14: envoy.extensions.filters.common.sentinel.v3.FallbackAction.ResponseAdditionalHeadersEntry
	(*duration.Duration)(nil), // 15: google.protobuf.Duration
}
var file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_depIdxs = []int32{
	10, // 0: envoy.extensions.filters.common.sentinel.v3.CommonConfigNew.rules:type_name -> envoy.extensions.filters.common.sentinel.v3.FaultToleranceRule
	0,  // 1: envoy.extensions.filters.common.sentinel.v3.RateLimitStrategy.limit_mode:type_name -> envoy.extensions.filters.common.sentinel.v3.RateLimitStrategy.LimitMode
	15, // 2: envoy.extensions.filters.common.sentinel.v3.RateLimitStrategy.stat_duration:type_name -> google.protobuf.Duration
	1,  // 3: envoy.extensions.filters.common.sentinel.v3.ConcurrencyLimitStrategy.limit_mode:type_name -> envoy.extensions.filters.common.sentinel.v3.ConcurrencyLimitStrategy.LimitMode
	2,  // 4: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.strategy:type_name -> envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.Strategy
	15, // 5: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.stat_duration:type_name -> google.protobuf.Duration
	15, // 6: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.recovery_timeout:type_name -> google.protobuf.Duration
	11, // 7: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.slow_condition:type_name -> envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.CircuitBreakerSlowCondition
	12, // 8: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.error_condition:type_name -> envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.CircuitBreakerErrorCondition
	3,  // 9: envoy.extensions.filters.common.sentinel.v3.FallbackAction.type:type_name -> envoy.extensions.filters.common.sentinel.v3.FallbackAction.BehaviorType
	4,  // 10: envoy.extensions.filters.common.sentinel.v3.FallbackAction.body_encoding:type_name -> envoy.extensions.filters.common.sentinel.v3.FallbackAction.BodyEncoding
	14, // 11: envoy.extensions.filters.common.sentinel.v3.FallbackAction.response_additional_headers:type_name -> envoy.extensions.filters.common.sentinel.v3.FallbackAction.ResponseAdditionalHeadersEntry
	6,  // 12: envoy.extensions.filters.common.sentinel.v3.FaultToleranceRule.rate_limit_strategies:type_name -> envoy.extensions.filters.common.sentinel.v3.RateLimitStrategy
	7,  // 13: envoy.extensions.filters.common.sentinel.v3.FaultToleranceRule.concurrency_limit_strategies:type_name -> envoy.extensions.filters.common.sentinel.v3.ConcurrencyLimitStrategy
	8,  // 14: envoy.extensions.filters.common.sentinel.v3.FaultToleranceRule.circuit_breaker_strategies:type_name -> envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy
	9,  // 15: envoy.extensions.filters.common.sentinel.v3.FaultToleranceRule.action:type_name -> envoy.extensions.filters.common.sentinel.v3.FallbackAction
	15, // 16: envoy.extensions.filters.common.sentinel.v3.CircuitBreakerStrategy.CircuitBreakerSlowCondition.max_allowed_rt:type_name -> google.protobuf.Duration
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_init() }
func file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_init() {
	if File_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonConfigNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLimitStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallbackAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FaultToleranceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerStrategy_CircuitBreakerSlowCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerStrategy_CircuitBreakerErrorCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakerStrategy_RecoveryStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_goTypes,
		DependencyIndexes: file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_depIdxs,
		EnumInfos:         file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_enumTypes,
		MessageInfos:      file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_msgTypes,
	}.Build()
	File_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto = out.File
	file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_rawDesc = nil
	file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_goTypes = nil
	file_contrib_envoy_extensions_filters_common_sentinel_v3_config_new_proto_depIdxs = nil
}
