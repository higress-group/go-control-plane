// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: contrib/envoy/extensions/filters/http/xmodule/v3/filter.proto

package xmodulev3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConfigProto with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigProto with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigProtoMultiError, or
// nil if none found.
func (m *ConfigProto) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AdminMode

	// no validation rules for Disable

	// no validation rules for MatchedHost

	// no validation rules for SaveVariable

	// no validation rules for MaxDecodeBufferLimit

	if len(errors) > 0 {
		return ConfigProtoMultiError(errors)
	}

	return nil
}

// ConfigProtoMultiError is an error wrapping multiple validation errors
// returned by ConfigProto.ValidateAll() if the designated constraints aren't met.
type ConfigProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigProtoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigProtoMultiError) AllErrors() []error { return m }

// ConfigProtoValidationError is the validation error returned by
// ConfigProto.Validate if the designated constraints aren't met.
type ConfigProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigProtoValidationError) ErrorName() string { return "ConfigProtoValidationError" }

// Error satisfies the builtin error interface
func (e ConfigProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigProtoValidationError{}

// Validate checks the field values on PerRouteConfigProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PerRouteConfigProto) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PerRouteConfigProto with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PerRouteConfigProtoMultiError, or nil if none found.
func (m *PerRouteConfigProto) ValidateAll() error {
	return m.validate(true)
}

func (m *PerRouteConfigProto) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Disable

	// no validation rules for MatchedHost

	if len(errors) > 0 {
		return PerRouteConfigProtoMultiError(errors)
	}

	return nil
}

// PerRouteConfigProtoMultiError is an error wrapping multiple validation
// errors returned by PerRouteConfigProto.ValidateAll() if the designated
// constraints aren't met.
type PerRouteConfigProtoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerRouteConfigProtoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerRouteConfigProtoMultiError) AllErrors() []error { return m }

// PerRouteConfigProtoValidationError is the validation error returned by
// PerRouteConfigProto.Validate if the designated constraints aren't met.
type PerRouteConfigProtoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerRouteConfigProtoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerRouteConfigProtoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerRouteConfigProtoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerRouteConfigProtoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerRouteConfigProtoValidationError) ErrorName() string {
	return "PerRouteConfigProtoValidationError"
}

// Error satisfies the builtin error interface
func (e PerRouteConfigProtoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerRouteConfigProto.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerRouteConfigProtoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerRouteConfigProtoValidationError{}

// Validate checks the field values on BootstrapConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BootstrapConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BootstrapConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BootstrapConfigMultiError, or nil if none found.
func (m *BootstrapConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *BootstrapConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetConfigPath()) < 1 {
		err := BootstrapConfigValidationError{
			field:  "ConfigPath",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ConfigCheckRate

	if utf8.RuneCountInString(m.GetAgentSock()) < 1 {
		err := BootstrapConfigValidationError{
			field:  "AgentSock",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPunishCluster()) < 1 {
		err := BootstrapConfigValidationError{
			field:  "PunishCluster",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PunishHost

	// no validation rules for X5Proxy

	// no validation rules for FlowSlsProducer

	// no validation rules for SlsPort

	// no validation rules for DecompressBufferSize

	// no validation rules for SndbufSize

	// no validation rules for MaxIpcLen

	// no validation rules for AbnormalReportEnable

	// no validation rules for CloudMode

	// no validation rules for Region

	// no validation rules for Cluster

	if len(errors) > 0 {
		return BootstrapConfigMultiError(errors)
	}

	return nil
}

// BootstrapConfigMultiError is an error wrapping multiple validation errors
// returned by BootstrapConfig.ValidateAll() if the designated constraints
// aren't met.
type BootstrapConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapConfigMultiError) AllErrors() []error { return m }

// BootstrapConfigValidationError is the validation error returned by
// BootstrapConfig.Validate if the designated constraints aren't met.
type BootstrapConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapConfigValidationError) ErrorName() string { return "BootstrapConfigValidationError" }

// Error satisfies the builtin error interface
func (e BootstrapConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrapConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapConfigValidationError{}
