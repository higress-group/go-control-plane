// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.1
// source: contrib/envoy/extensions/filters/http/http_dubbo_transcoder/v3/http_dubbo_transcoder.proto

package http_dubbo_transcoderv3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HttpDubboTranscoder_UrlUnescapeSpec int32

const (
	// URL path parameters will not decode RFC 6570 reserved characters.
	// For example, segment `%2f%23/%20%2523` is unescaped to `%2f%23/ %23`.
	HttpDubboTranscoder_ALL_CHARACTERS_EXCEPT_RESERVED HttpDubboTranscoder_UrlUnescapeSpec = 0
	// URL path parameters will be fully URI-decoded except in
	// cases of single segment matches in reserved expansion, where "%2F" will be
	// left encoded.
	// For example, segment `%2f%23/%20%2523` is unescaped to `%2f#/ %23`.
	HttpDubboTranscoder_ALL_CHARACTERS_EXCEPT_SLASH HttpDubboTranscoder_UrlUnescapeSpec = 1
	// URL path parameters will be fully URI-decoded.
	// For example, segment `%2f%23/%20%2523` is unescaped to `/#/ %23`.
	HttpDubboTranscoder_ALL_CHARACTERS HttpDubboTranscoder_UrlUnescapeSpec = 2
)

// Enum value maps for HttpDubboTranscoder_UrlUnescapeSpec.
var (
	HttpDubboTranscoder_UrlUnescapeSpec_name = map[int32]string{
		0: "ALL_CHARACTERS_EXCEPT_RESERVED",
		1: "ALL_CHARACTERS_EXCEPT_SLASH",
		2: "ALL_CHARACTERS",
	}
	HttpDubboTranscoder_UrlUnescapeSpec_value = map[string]int32{
		"ALL_CHARACTERS_EXCEPT_RESERVED": 0,
		"ALL_CHARACTERS_EXCEPT_SLASH":    1,
		"ALL_CHARACTERS":                 2,
	}
)

func (x HttpDubboTranscoder_UrlUnescapeSpec) Enum() *HttpDubboTranscoder_UrlUnescapeSpec {
	p := new(HttpDubboTranscoder_UrlUnescapeSpec)
	*p = x
	return p
}

func (x HttpDubboTranscoder_UrlUnescapeSpec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpDubboTranscoder_UrlUnescapeSpec) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_enumTypes[0].Descriptor()
}

func (HttpDubboTranscoder_UrlUnescapeSpec) Type() protoreflect.EnumType {
	return &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_enumTypes[0]
}

func (x HttpDubboTranscoder_UrlUnescapeSpec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpDubboTranscoder_UrlUnescapeSpec.Descriptor instead.
func (HttpDubboTranscoder_UrlUnescapeSpec) EnumDescriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 0}
}

type HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec int32

const (
	HttpDubboTranscoder_DubboMethodMapping_ALL_GET    HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec = 0
	HttpDubboTranscoder_DubboMethodMapping_ALL_POST   HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec = 1
	HttpDubboTranscoder_DubboMethodMapping_ALL_PUT    HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec = 2
	HttpDubboTranscoder_DubboMethodMapping_ALL_DELETE HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec = 3
	HttpDubboTranscoder_DubboMethodMapping_ALL_PATCH  HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec = 4
)

// Enum value maps for HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec.
var (
	HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec_name = map[int32]string{
		0: "ALL_GET",
		1: "ALL_POST",
		2: "ALL_PUT",
		3: "ALL_DELETE",
		4: "ALL_PATCH",
	}
	HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec_value = map[string]int32{
		"ALL_GET":    0,
		"ALL_POST":   1,
		"ALL_PUT":    2,
		"ALL_DELETE": 3,
		"ALL_PATCH":  4,
	}
)

func (x HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec) Enum() *HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec {
	p := new(HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec)
	*p = x
	return p
}

func (x HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_enumTypes[1].Descriptor()
}

func (HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec) Type() protoreflect.EnumType {
	return &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_enumTypes[1]
}

func (x HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec.Descriptor instead.
func (HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec) EnumDescriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 1, 0}
}

type HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec int32

const (
	HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ALL_QUERY_PARAMETER HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec = 0
	HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ALL_HEADER          HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec = 1
	HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ALL_PATH            HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec = 2
	HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ALL_BODY            HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec = 3
)

// Enum value maps for HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec.
var (
	HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec_name = map[int32]string{
		0: "ALL_QUERY_PARAMETER",
		1: "ALL_HEADER",
		2: "ALL_PATH",
		3: "ALL_BODY",
	}
	HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec_value = map[string]int32{
		"ALL_QUERY_PARAMETER": 0,
		"ALL_HEADER":          1,
		"ALL_PATH":            2,
		"ALL_BODY":            3,
	}
)

func (x HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec) Enum() *HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec {
	p := new(HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec)
	*p = x
	return p
}

func (x HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec) Descriptor() protoreflect.EnumDescriptor {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_enumTypes[2].Descriptor()
}

func (HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec) Type() protoreflect.EnumType {
	return &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_enumTypes[2]
}

func (x HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec.Descriptor instead.
func (HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec) EnumDescriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

// [#protodoc-title: Buffer]
// Buffer :ref:`configuration overview <config_http_filters_buffer>`.
// [#extension: envoy.filters.http.buffer]
type HttpDubboTranscoder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configure the behavior when handling requests that cannot be transcoded.
	//
	// By default, the transcoder will silently pass through HTTP requests that are malformed.
	// This includes requests with unknown query parameters, unregister paths, etc.
	RequestValidationOptions *HttpDubboTranscoder_RequestValidateOptions `protobuf:"bytes,2,opt,name=request_validation_options,json=requestValidationOptions,proto3" json:"request_validation_options,omitempty"`
	// URL unescaping policy.
	// This spec is only applied when extracting variable with multiple segments in the URL path.
	// For example, in case of `/foo/{x=*}/bar/{y=prefix/*}/{z=**}` `x` variable is single segment and `y` and `z` are multiple segments.
	// For a path with `/foo/first/bar/prefix/second/third/fourth`, `x=first`, `y=prefix/second`, `z=third/fourth`.
	// If this setting is not specified, the value defaults to :ref:`ALL_CHARACTERS_EXCEPT_RESERVED<envoy_v3_api_enum_value_extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.UrlUnescapeSpec.ALL_CHARACTERS_EXCEPT_RESERVED>`.
	UrlUnescapeSpec HttpDubboTranscoder_UrlUnescapeSpec        `protobuf:"varint,3,opt,name=url_unescape_spec,json=urlUnescapeSpec,proto3,enum=envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder_UrlUnescapeSpec" json:"url_unescape_spec,omitempty"`
	ServicesMapping []*HttpDubboTranscoder_DubboServiceMapping `protobuf:"bytes,4,rep,name=services_mapping,json=servicesMapping,proto3" json:"services_mapping,omitempty"`
}

func (x *HttpDubboTranscoder) Reset() {
	*x = HttpDubboTranscoder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpDubboTranscoder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDubboTranscoder) ProtoMessage() {}

func (x *HttpDubboTranscoder) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDubboTranscoder.ProtoReflect.Descriptor instead.
func (*HttpDubboTranscoder) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0}
}

func (x *HttpDubboTranscoder) GetRequestValidationOptions() *HttpDubboTranscoder_RequestValidateOptions {
	if x != nil {
		return x.RequestValidationOptions
	}
	return nil
}

func (x *HttpDubboTranscoder) GetUrlUnescapeSpec() HttpDubboTranscoder_UrlUnescapeSpec {
	if x != nil {
		return x.UrlUnescapeSpec
	}
	return HttpDubboTranscoder_ALL_CHARACTERS_EXCEPT_RESERVED
}

func (x *HttpDubboTranscoder) GetServicesMapping() []*HttpDubboTranscoder_DubboServiceMapping {
	if x != nil {
		return x.ServicesMapping
	}
	return nil
}

type HttpDubboTranscoder_RequestValidateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// default this trascoder will pass the request which contains unknown query paramters,
	// if this option set to true, the request will be reject with 400 Bad Request.
	RejectUnknownQueryParameters bool `protobuf:"varint,1,opt,name=reject_unknown_query_parameters,json=rejectUnknownQueryParameters,proto3" json:"reject_unknown_query_parameters,omitempty"`
	RejectUnknownMethod          bool `protobuf:"varint,2,opt,name=reject_unknown_method,json=rejectUnknownMethod,proto3" json:"reject_unknown_method,omitempty"`
}

func (x *HttpDubboTranscoder_RequestValidateOptions) Reset() {
	*x = HttpDubboTranscoder_RequestValidateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpDubboTranscoder_RequestValidateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDubboTranscoder_RequestValidateOptions) ProtoMessage() {}

func (x *HttpDubboTranscoder_RequestValidateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDubboTranscoder_RequestValidateOptions.ProtoReflect.Descriptor instead.
func (*HttpDubboTranscoder_RequestValidateOptions) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 0}
}

func (x *HttpDubboTranscoder_RequestValidateOptions) GetRejectUnknownQueryParameters() bool {
	if x != nil {
		return x.RejectUnknownQueryParameters
	}
	return false
}

func (x *HttpDubboTranscoder_RequestValidateOptions) GetRejectUnknownMethod() bool {
	if x != nil {
		return x.RejectUnknownMethod
	}
	return false
}

type HttpDubboTranscoder_DubboMethodMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string                                                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PathMatcher        *HttpDubboTranscoder_DubboMethodMapping_PathMatcher        `protobuf:"bytes,2,opt,name=path_matcher,json=pathMatcher,proto3" json:"path_matcher,omitempty"`
	ParameterMapping   []*HttpDubboTranscoder_DubboMethodMapping_ParameterMapping `protobuf:"bytes,3,rep,name=parameter_mapping,json=parameterMapping,proto3" json:"parameter_mapping,omitempty"`
	PassthroughSetting *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting `protobuf:"bytes,4,opt,name=passthrough_setting,json=passthroughSetting,proto3" json:"passthrough_setting,omitempty"`
}

func (x *HttpDubboTranscoder_DubboMethodMapping) Reset() {
	*x = HttpDubboTranscoder_DubboMethodMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpDubboTranscoder_DubboMethodMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDubboTranscoder_DubboMethodMapping) ProtoMessage() {}

func (x *HttpDubboTranscoder_DubboMethodMapping) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDubboTranscoder_DubboMethodMapping.ProtoReflect.Descriptor instead.
func (*HttpDubboTranscoder_DubboMethodMapping) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 1}
}

func (x *HttpDubboTranscoder_DubboMethodMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpDubboTranscoder_DubboMethodMapping) GetPathMatcher() *HttpDubboTranscoder_DubboMethodMapping_PathMatcher {
	if x != nil {
		return x.PathMatcher
	}
	return nil
}

func (x *HttpDubboTranscoder_DubboMethodMapping) GetParameterMapping() []*HttpDubboTranscoder_DubboMethodMapping_ParameterMapping {
	if x != nil {
		return x.ParameterMapping
	}
	return nil
}

func (x *HttpDubboTranscoder_DubboMethodMapping) GetPassthroughSetting() *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting {
	if x != nil {
		return x.PassthroughSetting
	}
	return nil
}

type HttpDubboTranscoder_DubboServiceMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                                    `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	MethodMapping []*HttpDubboTranscoder_DubboMethodMapping `protobuf:"bytes,3,rep,name=method_mapping,json=methodMapping,proto3" json:"method_mapping,omitempty"`
	Group         string                                    `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *HttpDubboTranscoder_DubboServiceMapping) Reset() {
	*x = HttpDubboTranscoder_DubboServiceMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpDubboTranscoder_DubboServiceMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDubboTranscoder_DubboServiceMapping) ProtoMessage() {}

func (x *HttpDubboTranscoder_DubboServiceMapping) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDubboTranscoder_DubboServiceMapping.ProtoReflect.Descriptor instead.
func (*HttpDubboTranscoder_DubboServiceMapping) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 2}
}

func (x *HttpDubboTranscoder_DubboServiceMapping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpDubboTranscoder_DubboServiceMapping) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HttpDubboTranscoder_DubboServiceMapping) GetMethodMapping() []*HttpDubboTranscoder_DubboMethodMapping {
	if x != nil {
		return x.MethodMapping
	}
	return nil
}

func (x *HttpDubboTranscoder_DubboServiceMapping) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type HttpDubboTranscoder_DubboMethodMapping_ParameterMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtractKeySpec HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec `protobuf:"varint,1,opt,name=extract_key_spec,json=extractKeySpec,proto3,enum=envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec" json:"extract_key_spec,omitempty"`
	ExtractKey     string                                                                 `protobuf:"bytes,2,opt,name=extract_key,json=extractKey,proto3" json:"extract_key,omitempty"`
	MappingType    string                                                                 `protobuf:"bytes,3,opt,name=mapping_type,json=mappingType,proto3" json:"mapping_type,omitempty"`
}

func (x *HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) Reset() {
	*x = HttpDubboTranscoder_DubboMethodMapping_ParameterMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) ProtoMessage() {}

func (x *HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDubboTranscoder_DubboMethodMapping_ParameterMapping.ProtoReflect.Descriptor instead.
func (*HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) GetExtractKeySpec() HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec {
	if x != nil {
		return x.ExtractKeySpec
	}
	return HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ALL_QUERY_PARAMETER
}

func (x *HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) GetExtractKey() string {
	if x != nil {
		return x.ExtractKey
	}
	return ""
}

func (x *HttpDubboTranscoder_DubboMethodMapping_ParameterMapping) GetMappingType() string {
	if x != nil {
		return x.MappingType
	}
	return ""
}

type HttpDubboTranscoder_DubboMethodMapping_PathMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchPattern        string                                                     `protobuf:"bytes,1,opt,name=match_pattern,json=matchPattern,proto3" json:"match_pattern,omitempty"`
	MatchHttpMethodSpec HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec `protobuf:"varint,2,opt,name=match_http_method_spec,json=matchHttpMethodSpec,proto3,enum=envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec" json:"match_http_method_spec,omitempty"`
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PathMatcher) Reset() {
	*x = HttpDubboTranscoder_DubboMethodMapping_PathMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PathMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDubboTranscoder_DubboMethodMapping_PathMatcher) ProtoMessage() {}

func (x *HttpDubboTranscoder_DubboMethodMapping_PathMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDubboTranscoder_DubboMethodMapping_PathMatcher.ProtoReflect.Descriptor instead.
func (*HttpDubboTranscoder_DubboMethodMapping_PathMatcher) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PathMatcher) GetMatchPattern() string {
	if x != nil {
		return x.MatchPattern
	}
	return ""
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PathMatcher) GetMatchHttpMethodSpec() HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec {
	if x != nil {
		return x.MatchHttpMethodSpec
	}
	return HttpDubboTranscoder_DubboMethodMapping_ALL_GET
}

type HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HeadersSetting:
	//	*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughAllHeaders
	//	*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders_
	HeadersSetting isHttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_HeadersSetting `protobuf_oneof:"headers_setting"`
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) Reset() {
	*x = HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) ProtoMessage() {}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting.ProtoReflect.Descriptor instead.
func (*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (m *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) GetHeadersSetting() isHttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_HeadersSetting {
	if m != nil {
		return m.HeadersSetting
	}
	return nil
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) GetPassthroughAllHeaders() bool {
	if x, ok := x.GetHeadersSetting().(*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughAllHeaders); ok {
		return x.PassthroughAllHeaders
	}
	return false
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting) GetPassthroughHeaders() *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders {
	if x, ok := x.GetHeadersSetting().(*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders_); ok {
		return x.PassthroughHeaders
	}
	return nil
}

type isHttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_HeadersSetting interface {
	isHttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_HeadersSetting()
}

type HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughAllHeaders struct {
	PassthroughAllHeaders bool `protobuf:"varint,1,opt,name=passthrough_all_headers,json=passthroughAllHeaders,proto3,oneof"`
}

type HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders_ struct {
	PassthroughHeaders *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders `protobuf:"bytes,2,opt,name=passthrough_headers,json=passthroughHeaders,proto3,oneof"`
}

func (*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughAllHeaders) isHttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_HeadersSetting() {
}

func (*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders_) isHttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_HeadersSetting() {
}

type HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders) Reset() {
	*x = HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders) ProtoMessage() {}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders.ProtoReflect.Descriptor instead.
func (*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders) Descriptor() ([]byte, []int) {
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

func (x *HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto protoreflect.FileDescriptor

var file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDesc = []byte{
	0x0a, 0x5a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62,
	0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x33,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb1, 0x13, 0x0a, 0x13, 0x48, 0x74, 0x74, 0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x62, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x75,
	0x72, 0x6c, 0x5f, 0x75, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62, 0x62,
	0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f,
	0x64, 0x65, 0x72, 0x2e, 0x55, 0x72, 0x6c, 0x55, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x75,
	0x72, 0x6c, 0x55, 0x6e, 0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x8a,
	0x01, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5f, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64,
	0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x1a, 0x93, 0x01, 0x0a, 0x16,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x1a, 0xe6, 0x0b, 0x0a, 0x12, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x44,
	0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x44,
	0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x71, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x44, 0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e,
	0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0xd8, 0x02, 0x0a, 0x10, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0xa8,
	0x01, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x7e, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64,
	0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a,
	0x0e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x4c, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f,
	0x50, 0x41, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x42, 0x4f,
	0x44, 0x59, 0x10, 0x03, 0x1a, 0xdc, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0xa7, 0x01, 0x0a, 0x16, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x72, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f,
	0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x1a, 0xc6, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x61,
	0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x15, 0x70,
	0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x6c, 0x6c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0xb8, 0x01, 0x0a, 0x13, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x84, 0x01, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72,
	0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52, 0x12, 0x70, 0x61, 0x73,
	0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a,
	0x28, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x5c, 0x0a, 0x13,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x4c, 0x4c, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x1a, 0xea, 0x01, 0x0a, 0x13, 0x44,
	0x75, 0x62, 0x62, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x44, 0x75, 0x62, 0x62, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2e,
	0x44, 0x75, 0x62, 0x62, 0x6f, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x6a, 0x0a, 0x0f, 0x55, 0x72, 0x6c, 0x55, 0x6e,
	0x65, 0x73, 0x63, 0x61, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x4c,
	0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x45, 0x58, 0x43,
	0x45, 0x50, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x53,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x53, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52,
	0x53, 0x10, 0x02, 0x42, 0xe1, 0x01, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0x0a, 0x44,
	0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x42, 0x18, 0x48, 0x74, 0x74, 0x70, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x75, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62, 0x62,
	0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x3b,
	0x68, 0x74, 0x74, 0x70, 0x5f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescOnce sync.Once
	file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescData = file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDesc
)

func file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescGZIP() []byte {
	file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescOnce.Do(func() {
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescData = protoimpl.X.CompressGZIP(file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescData)
	})
	return file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDescData
}

var file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_goTypes = []interface{}{
	(HttpDubboTranscoder_UrlUnescapeSpec)(0),                                             // 0: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.UrlUnescapeSpec
	(HttpDubboTranscoder_DubboMethodMapping_MatchHttpMethodSpec)(0),                      // 1: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.MatchHttpMethodSpec
	(HttpDubboTranscoder_DubboMethodMapping_ParameterMapping_ExtractKeySpec)(0),          // 2: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.ParameterMapping.ExtractKeySpec
	(*HttpDubboTranscoder)(nil),                                                          // 3: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder
	(*HttpDubboTranscoder_RequestValidateOptions)(nil),                                   // 4: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.RequestValidateOptions
	(*HttpDubboTranscoder_DubboMethodMapping)(nil),                                       // 5: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping
	(*HttpDubboTranscoder_DubboServiceMapping)(nil),                                      // 6: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboServiceMapping
	(*HttpDubboTranscoder_DubboMethodMapping_ParameterMapping)(nil),                      // 7: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.ParameterMapping
	(*HttpDubboTranscoder_DubboMethodMapping_PathMatcher)(nil),                           // 8: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.PathMatcher
	(*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting)(nil),                    // 9: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.PassthroughSetting
	(*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders)(nil), // 10: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.PassthroughSetting.PassthroughHeaders
}
var file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_depIdxs = []int32{
	4,  // 0: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.request_validation_options:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.RequestValidateOptions
	0,  // 1: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.url_unescape_spec:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.UrlUnescapeSpec
	6,  // 2: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.services_mapping:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboServiceMapping
	8,  // 3: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.path_matcher:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.PathMatcher
	7,  // 4: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.parameter_mapping:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.ParameterMapping
	9,  // 5: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.passthrough_setting:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.PassthroughSetting
	5,  // 6: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboServiceMapping.method_mapping:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping
	2,  // 7: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.ParameterMapping.extract_key_spec:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.ParameterMapping.ExtractKeySpec
	1,  // 8: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.PathMatcher.match_http_method_spec:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.MatchHttpMethodSpec
	10, // 9: envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.PassthroughSetting.passthrough_headers:type_name -> envoy.extensions.filters.http.http_dubbo_transcoder.v3.HttpDubboTranscoder.DubboMethodMapping.PassthroughSetting.PassthroughHeaders
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() {
	file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_init()
}
func file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_init() {
	if File_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpDubboTranscoder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpDubboTranscoder_RequestValidateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpDubboTranscoder_DubboMethodMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpDubboTranscoder_DubboServiceMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpDubboTranscoder_DubboMethodMapping_ParameterMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpDubboTranscoder_DubboMethodMapping_PathMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughAllHeaders)(nil),
		(*HttpDubboTranscoder_DubboMethodMapping_PassthroughSetting_PassthroughHeaders_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_goTypes,
		DependencyIndexes: file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_depIdxs,
		EnumInfos:         file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_enumTypes,
		MessageInfos:      file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_msgTypes,
	}.Build()
	File_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto = out.File
	file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_rawDesc = nil
	file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_goTypes = nil
	file_contrib_envoy_extensions_filters_http_http_dubbo_transcoder_v3_http_dubbo_transcoder_proto_depIdxs = nil
}
